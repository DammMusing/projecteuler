/**
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
*/

package main

import "testing"

func TestFirstTriangleNumberOfManyFactors(t *testing.T) {
	type args struct {
		min_num_divisors int
	}
	tests := []struct {
		name string
		args args
		want uint64
	}{
		{name: "simple", args: args{min_num_divisors: 5}, want: 28},
		{name: "simple", args: args{min_num_divisors: 500}, want: 76576500}, // takes 9ish minutes
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := FirstTriangleNumberOfManyFactors(tt.args.min_num_divisors); got != tt.want {
				t.Errorf("FirstTriangleNumberOfManyFactors() = %v, want %v", got, tt.want)
			}
		})
	}
}
